%{
#include <iostream>
#include <string>

#include "Store.h"
#include "../config.h"
#include "../forward.h"
#include "../nodes/AST.h"
#include "../primitives.h"
#include "../MathHelper.h"
#include "../Values.h"
#include "../nodes/Expressions.h"
#include "../nodes/Program.h"
#include "../nodes/Typing.h"
#include "../nodes/Control.h"
#include "../nodes/Variables.h"
#include "../nodes/Functional.h"
#include "../nodes/Macros.hpp"

#include "parser.tab.hpp"

// Declare yylex for Bison
extern int yylex();

extern char* yytext;
extern int yydebug;

extern int yyvlineno;
extern int yylineno;

void yyerror(const char* s);
extern Cmm::Program::ProgramNode* root;

%}

%union {
    std::string* str;
    Cmm::EvaluableNode* evaluable;
    Cmm::ExecutableNode* executable;
    Cmm::ASTNode* node;
    Cmm::Typing::TypeListNode* tlist;
    Cmm::Control::SwitchCaseNode* sw_case_t;
    Cmm::Control::SwitchBodyNode* sw_body_t;
}

%token END

// Token definitions with C++ types
%token <str> V_STRING V_INTEGER V_COMPLEX V_REAL V_BOOLEAN
%token <str> ID

%token TYPE_REAL TYPE_INT TYPE_STR TYPE_COMPLEX TYPE_BOOL TYPE_VOID

%token OP_ASSIGN OP_PLUS OP_MINUS OP_MULT OP_DIV OP_MOD
%token OP_LS OP_RS OP_BOR OP_BAND OP_XOR
%token OP_OR OP_AND OP_NOT OP_INVERT OP_EQUAL
%token OP_GREATER OP_LESS OP_GE OP_LE OP_NEQUAL

%token OP_APLUS OP_AMINUS OP_AMULT OP_ADIV OP_AMOD
%token OP_ARS OP_ALS OP_ABOR OP_ABAND OP_AXOR

%token OP_INC OP_DEC
 
%token D_SEMICOLON D_LPAREN D_RPAREN D_LBRACE D_RBRACE D_COLON D_COMMA D_ARROW
%token CONTROL_IF CONTROL_ELSE CONTROL_WHILE CONTROL_FOR CONTROL_SWITCH
%token CONTROL_CASE CONTROL_DEFAULT CONTROL_DO CONTROL_RETURN CONTROL_BREAK CONTROL_CONTINUE
%token MISC_FUNC MISC_VAR MISC_CONST MISC_NATIVE

%token MARCO_LINE
%token MARCO_CLEAR

// Type declarations
%type <str> OP_EQUAL OP_ASSIGN OP_PLUS OP_MINUS OP_MULT OP_DIV OP_MOD OP_LS OP_RS OP_BOR OP_BAND OP_XOR OP_OR OP_AND OP_NOT OP_INVERT
%type <str> OP_APLUS OP_AMINUS OP_AMULT OP_ADIV OP_AMOD OP_ARS OP_ALS OP_ABOR OP_ABAND OP_AXOR
%type <str> OP_GREATER OP_LESS OP_GE OP_LE OP_NEQUAL
%type <str> OP_INC OP_DEC

%type <str> compoundable_operator

%type <str> type_specifier
%type <evaluable> constant_value expr expr_casted_term
%type <evaluable> expr_term_l0 expr_term_l1 expr_term_l2 expr_term_l3 expr_term_l4 expr_term_l5

%type <executable> program statement statements_list var_decl_stmt var_assign_stmt

%type <executable> func_def return_stmt scope_stmt
%type <node>       func_arg_list func_arg 
%type <tlist>      types_list

%type <evaluable>  func_param func_call 
%type <node>       func_param_list

%type <executable> if_stmt for_stmt break_stmt continue_stmt while_stmt unwrapped_stmt switch_stmt
%type <sw_case_t> switch_case
%type <sw_body_t> switch_body

%precedence OP_UNARY_MINUS

%nonassoc CONTROL_IF
%nonassoc LOWER_THAN_ELSE
%nonassoc CONTROL_ELSE

%start program

%%
//               ============== Program ==============

program:
      statements_list END {
        $$ = new Cmm::Program::ProgramNode($1);
        Cmm::Store::root = dynamic_cast<Cmm::Program::ProgramNode*>($$);
        YYACCEPT;
      }
    ;


statements_list:
    statement                   { $$ = new Cmm::Program::StatementListNode(nullptr, $1); }
  | statements_list statement   { $$ = new Cmm::Program::StatementListNode(dynamic_cast<Cmm::Program::StatementListNode*>($1), $2); }
  ;

statement:
    expr D_SEMICOLON                 { $$ = new Cmm::Program::ExpressionStatementNode($1);}
  | var_decl_stmt D_SEMICOLON        { $$ = $1; }
  | var_assign_stmt D_SEMICOLON      { $$ = $1; }
  | return_stmt D_SEMICOLON          { $$ = $1; }
  | func_def                         { $$ = $1; }
  | scope_stmt                       { $$ = $1; }
  | if_stmt                          { $$ = $1; }
  | for_stmt                         { $$ = $1; }
  | while_stmt                       { $$ = $1; }
  | switch_stmt                      { $$ = $1; }
  | continue_stmt D_SEMICOLON        { $$ = $1; }
  | break_stmt D_SEMICOLON           { $$ = $1; }
  | D_SEMICOLON                      { $$ = nullptr; } // just a semicolon

  | line_rule                        { $$ = nullptr; } // just a line rule
  | MARCO_CLEAR                      { $$ = new Cmm::Macros::ClearMacro(); }
  | error                            {
                                        yyerrok;
                                        $$ = nullptr;
                                     }
  ;

//               ==============  CONTROL   ==============
if_stmt:
    CONTROL_IF D_LPAREN expr D_RPAREN statement %prec LOWER_THAN_ELSE
    { $$ = new Cmm::Control::IFNode($3, $5, nullptr); }
  | CONTROL_IF D_LPAREN expr D_RPAREN statement CONTROL_ELSE statement
    { $$ = new Cmm::Control::IFNode($3, $5, $7); } 
  ;

unwrapped_stmt:
    var_assign_stmt
  | expr                             { $$ = new Cmm::Program::ExpressionStatementNode($1);}

for_stmt:
    CONTROL_FOR D_LPAREN var_decl_stmt D_SEMICOLON expr D_SEMICOLON unwrapped_stmt D_RPAREN statement { $$ = new Cmm::Control::ForNode($5, $3, $7, $9); }
  | CONTROL_FOR D_LPAREN D_SEMICOLON expr D_SEMICOLON D_RPAREN statement                              { $$ = new Cmm::Control::ForNode($4, nullptr, nullptr, $7); }
  | CONTROL_FOR D_LPAREN D_SEMICOLON D_SEMICOLON D_RPAREN statement                                   { $$ = new Cmm::Control::ForNode(nullptr, nullptr, nullptr, $6); }
  | CONTROL_FOR D_LPAREN D_SEMICOLON expr D_SEMICOLON unwrapped_stmt D_RPAREN statement               { $$ = new Cmm::Control::ForNode($4, nullptr, $6, $8); }
  ; 

while_stmt: 
    CONTROL_WHILE D_LPAREN expr D_RPAREN statement                               { $$ = new Cmm::Control::ForNode($3, nullptr, nullptr, $5); }
  | CONTROL_DO statement CONTROL_WHILE D_LPAREN expr D_RPAREN D_SEMICOLON        { $$ = new Cmm::Control::ForNode($5, nullptr, nullptr, $2, true); }
  ;

break_stmt:
    CONTROL_BREAK                                         { $$ = new Cmm::Control::BreakStatementNode(); } 
  ;

continue_stmt:
    CONTROL_CONTINUE                                      { $$ = new Cmm::Control::ContinueStatementNode(); } 
  ;


return_stmt:
    CONTROL_RETURN expr                                   { $$ = new Cmm::Control::ReturnStatementNode($2); } 
  | CONTROL_RETURN                                        { $$ = new Cmm::Control::ReturnStatementNode(nullptr); } 
  ;

switch_stmt:
    CONTROL_SWITCH D_LPAREN expr D_RPAREN D_LBRACE switch_body D_RBRACE {
      $$ = new Cmm::Control::SwitchNode($3, $6);
    }
  ;

switch_body:
    switch_case                                 { $$ = new Cmm::Control::SwitchBodyNode(nullptr, $1); }
  | switch_body switch_case                     { $$ = new Cmm::Control::SwitchBodyNode($1, $2); }
  ;

switch_case:
    CONTROL_CASE expr D_COLON statements_list   { $$ = new Cmm::Control::SwitchCaseNode($4, $2); }
  | CONTROL_DEFAULT D_COLON statements_list     { $$ = new Cmm::Control::SwitchCaseNode($3, nullptr); }
  ;


//               ============== VARIABLES  ==============
var_decl_stmt:
    MISC_VAR   ID D_COLON type_specifier OP_ASSIGN expr { $$ = new Cmm::Variables::VariableDeclarationNode(false, *$2, *$4, $6); }
  | MISC_CONST ID D_COLON type_specifier OP_ASSIGN expr { $$ = new Cmm::Variables::VariableDeclarationNode(true , *$2, *$4, $6); }
  | MISC_VAR   ID OP_ASSIGN expr { $$ = new Cmm::Variables::InferredVariableDeclarationNode(false, *$2, $4); }
  | MISC_CONST ID OP_ASSIGN expr { $$ = new Cmm::Variables::InferredVariableDeclarationNode(true , *$2, $4); }
  ;

var_assign_stmt:
    ID OP_ASSIGN expr                                   { $$ = new Cmm::Variables::VariableAssignmentNode(*$1, $3); } 
  | ID compoundable_operator expr                       { $$ = new Cmm::Variables::CompoundAssignmentNode(*$1, *$2, $3); }
  ;

compoundable_operator:
    OP_APLUS  { $1->pop_back(); $$ = $1; }
  | OP_AMINUS { $1->pop_back(); $$ = $1; }
  | OP_AMULT  { $1->pop_back(); $$ = $1; }
  | OP_ADIV   { $1->pop_back(); $$ = $1; }
  | OP_AMOD   { $1->pop_back(); $$ = $1; }
  | OP_ARS    { $1->pop_back(); $$ = $1; }
  | OP_ALS    { $1->pop_back(); $$ = $1; }
  | OP_ABOR   { $1->pop_back(); $$ = $1; }
  | OP_ABAND  { $1->pop_back(); $$ = $1; }
  | OP_AXOR   { $1->pop_back(); $$ = $1; }
  ;

//               ============== FUNCSTIONS ==============
scope_stmt:
    D_LBRACE statements_list D_RBRACE {
      $$ = new Cmm::Program::ScopeNode($2);
    }
    | D_LBRACE D_RBRACE {
      $$ = new Cmm::Program::ScopeNode(nullptr); // empty scope
    }
  ;
func_def:
    MISC_FUNC ID D_LPAREN func_arg_list D_RPAREN D_ARROW types_list D_LBRACE statements_list D_RBRACE {
      $$ = new Cmm::Functional::FunctionDeclarationNode(
        dynamic_cast<Cmm::Functional::FunctionArgumentListNode*>($4),
        dynamic_cast<Cmm::Program::StatementListNode*>($9),
        *$2,
        $7
      );
  }
  | MISC_FUNC ID D_LPAREN func_arg_list D_RPAREN D_ARROW types_list OP_ASSIGN MISC_NATIVE {
      $$ = new Cmm::Functional::FunctionDeclarationNode(
        dynamic_cast<Cmm::Functional::FunctionArgumentListNode*>($4),
        nullptr,
        *$2,
        $7
      );
   }
  ;

func_arg:
    ID D_COLON type_specifier                            { $$ = new Cmm::Functional::FunctionArgumentNode(*$1, *$3); }
  | ID D_COLON type_specifier OP_ASSIGN constant_value   { $$ = new Cmm::Functional::FunctionArgumentNode(*$1, *$3, $5); }
  ;

func_arg_list:
    func_arg                                   { $$ = new Cmm::Functional::FunctionArgumentListNode(nullptr, dynamic_cast<Cmm::Functional::FunctionArgumentNode*>($1)); }
  | func_arg_list D_COMMA func_arg             { $$ = new Cmm::Functional::FunctionArgumentListNode(dynamic_cast<Cmm::Functional::FunctionArgumentListNode*>($1), dynamic_cast<Cmm::Functional::FunctionArgumentNode*>($3)); }
  |                                            { $$ = new Cmm::Functional::FunctionArgumentListNode(nullptr, nullptr); }
  ;


func_call:
    ID D_LPAREN func_param_list D_RPAREN       { $$ = new Cmm::Functional::FunctionCallNode(*$1, dynamic_cast<Cmm::Functional::FunctionParamListNode*>($3)); }
  | ID D_LPAREN D_RPAREN                       { $$ = new Cmm::Functional::FunctionCallNode(*$1, nullptr); }
  ;

func_param_list:
    func_param                                 { $$ = new Cmm::Functional::FunctionParamListNode(nullptr, $1); }
  | func_param_list D_COMMA func_param         { $$ = new Cmm::Functional::FunctionParamListNode(dynamic_cast<Cmm::Functional::FunctionParamListNode*>($1), $3); }
  ;

func_param:
    expr                                       { $$ = $1; }
  ;


//               ============== Expressions ==============

expr:
    expr_casted_term                              { $$ = $1; }
  ;

expr_casted_term:
    D_LPAREN type_specifier D_RPAREN expr_term_l0 { $$ = new Cmm::Expressions::CastNode($4, *$2); }
  | expr_term_l0                                  { $$ = $1; }
  ;

expr_term_l0:
    expr_term_l1 OP_OR  expr_term_l1                 { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l1 OP_AND expr_term_l1                 { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l1
  ;

expr_term_l1:
     expr_term_l2
  | expr_term_l2 OP_EQUAL   expr_term_l2             { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l2 OP_GREATER expr_term_l2             { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l2 OP_LESS    expr_term_l2             { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l2 OP_LE      expr_term_l2             { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l2 OP_GE      expr_term_l2             { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l2 OP_NEQUAL  expr_term_l2             { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  ;

expr_term_l2:
    expr_term_l3
  | expr_term_l3 OP_PLUS  expr_term_l3               { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l3 OP_MINUS expr_term_l3               { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l3 OP_BOR   expr_term_l3               { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l3 OP_BAND  expr_term_l3               { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l3 OP_XOR   expr_term_l3               { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  ;


expr_term_l3:
    expr_term_l4
  | expr_term_l4 OP_MULT expr_term_l4                { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l4 OP_DIV  expr_term_l4                { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l4 OP_MOD  expr_term_l4                { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  ;

expr_term_l4:
    expr_term_l5
  | expr_term_l5 OP_LS   expr_term_l5                { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  | expr_term_l5 OP_RS   expr_term_l5                { $$ = new Cmm::Expressions::TermNode($1, $3, *$2); }
  ;


expr_term_l5:
    constant_value                               { $$ = $1; }
  | func_call                                    { $$ = $1; }
  | ID                                           { $$ = new Cmm::Expressions::VariableNode(*$1); }
  | D_LPAREN expr D_RPAREN                       { $$ = $2; }
  | OP_MINUS  expr_term_l5 %prec OP_UNARY_MINUS  { $$ = new Cmm::Expressions::NegatedNode($2); }
  | OP_PLUS   expr_term_l5 %prec OP_UNARY_MINUS  { $$ = $2; }
  | OP_NOT    expr_term_l5 %prec OP_UNARY_MINUS  { $$ = new Cmm::Expressions::NotNode($2); }
  | OP_INVERT expr_term_l5 %prec OP_UNARY_MINUS  { $$ = new Cmm::Expressions::InvertNode($2); }
  | OP_INC    ID                               { $$ = new Cmm::Variables::PreIncNode(*$2, *$1); }
  | OP_DEC    ID                               { $$ = new Cmm::Variables::PreIncNode(*$2, *$1); }
  | ID        OP_INC                           { $$ = new Cmm::Variables::PostIncNode(*$1, *$2); }
  | ID        OP_DEC                           { $$ = new Cmm::Variables::PostIncNode(*$1, *$2); }
  ;

constant_value:
    V_STRING    { $$ = new Cmm::Expressions::ConstantValueNode(Cmm::String(*$1)); }
  | V_INTEGER   { $$ = new Cmm::Expressions::ConstantValueNode(Cmm::Integer((*$1).c_str())); }
  | V_REAL      { $$ = new Cmm::Expressions::ConstantValueNode(Cmm::Real((*$1).c_str())); }
  | V_BOOLEAN   { $$ = new Cmm::Expressions::ConstantValueNode(Cmm::Bool(*($1) == "true")); }
  | V_COMPLEX   { 
    $1->pop_back(); // remove the "i"
    $$ = new Cmm::Expressions::ConstantValueNode(Cmm::Complex(Cmm::Real(0.0), Cmm::Real($1->c_str()))); 
  }
  ;

//               ============== Typing ==============

types_list:
    type_specifier                      { $$ = new Cmm::Typing::TypeListNode(nullptr, *$1); }
  | types_list OP_BOR type_specifier    { $$ = new Cmm::Typing::TypeListNode($1, *$3); }
  ;

type_specifier:
    TYPE_INT      { $$ = new std::string("int"); }
  | TYPE_REAL     { $$ = new std::string("real"); }
  | TYPE_STR      { $$ = new std::string("str"); }
  | TYPE_COMPLEX  { $$ = new std::string("complex"); }
  | TYPE_BOOL     { $$ = new std::string("bool"); }
  | TYPE_VOID     { $$ = new std::string("void"); }
  ;


//              ============== Shift handling ==============

line_rule:
    MARCO_LINE V_INTEGER {
        yyvlineno = std::stoi(*$2);
    }
%%

void yyerror(const char* s) {
  std::cout  << "[Error] " << yyvlineno << " " << s
              << " (unexpected token: '" << yytext << "')" << std::endl;

  // if (!Cmm::Cfg::allowErrors) {
  //   YYABORT;
  // }
}
