%{
#include <iostream>
#include <string>
#include "parser.tab.hpp"

// Declare yylex for Bison
extern int yylex();

// Error reporting function
void yyerror(const char* s) {
    std::cerr << "Error: " << s << std::endl;
}
%}

// Define the value type for semantic values
%union {
    double number;
    char* str;
}

// Define tokens
%token <number> NUMBER
%token PLUS MINUS MULTIPLY DIVIDE LPAREN RPAREN
%token END

// Define non-terminal types
%type <number> input expression term factor

// Precedence and associativity
%left PLUS MINUS
%left MULTIPLY DIVIDE
%precedence UMINUS

%%

// Grammar rules
input:
    expression {
        std::cout << "Result: " << $1 << std::endl; 
        YYACCEPT; // Explicitly accept the input
    }
    ;

expression:
    expression PLUS term    { $$ = $1 + $3; }
    | expression MINUS term { $$ = $1 - $3; }
    | term                  { $$ = $1; }
    ;

term:
    term MULTIPLY factor { $$ = $1 * $3; }
    | term DIVIDE factor { 
        if ($3 == 0) {
            yyerror("Division by zero");
            $$ = 0;
        } else {
            $$ = $1 / $3; 
        }
    }
    | factor             { $$ = $1; }
    ;

factor:
    NUMBER               { $$ = $1; }
    | LPAREN expression RPAREN { $$ = $2; }
    | MINUS factor %prec UMINUS { $$ = -$2; }
    ;

%%